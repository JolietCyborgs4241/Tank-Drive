// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
#include "ctre/Phoenix.h"
frc::SpeedController* RobotMap::driveTrainFrontLeftDrive = NULL;
frc::SpeedController* RobotMap::driveTrainFrontRightDrive = NULL;
frc::SpeedController* RobotMap::driveTrainRearLeftDrive = NULL;
frc::SpeedController* RobotMap::driveTrainRearRightDrive = NULL;
frc::AnalogInput* RobotMap::shooterEncoder = NULL;
/* AnalogInput* RobotMap::driveTrainFrontLeftPos = NULL;
SpeedController* RobotMap::driveTrainFrontLeftSteer = NULL;
PIDController* RobotMap::driveTrainFrontLeft = NULL;
AnalogInput* RobotMap::driveTrainFrontRightPos = NULL;
SpeedController* RobotMap::driveTrainFrontRightSteer = NULL;
PIDController* RobotMap::driveTrainFrontRight = NULL;
AnalogInput* RobotMap::driveTrainRearLeftPos = NULL;
SpeedController* RobotMap::driveTrainRearLeftSteer = NULL;
PIDController* RobotMap::driveTrainRearLeft = NULL;
AnalogInput* RobotMap::driveTrainRearRightPos = NULL;
SpeedController* RobotMap::driveTrainRearRightSteer = NULL;
PIDController* RobotMap::driveTrainRearRight = NULL;
Counter* RobotMap::ElevatorCounterTop = NULL;
DigitalInput* RobotMap::ElevatorSwitchTop = NULL;
Counter* RobotMap::ElevatorCounterGarbage = NULL;
DigitalInput* RobotMap::ElevatorSwitchGarbage = NULL;
//CameraServer* RobotMap::Cam = NULL;
*/
void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	frc::LiveWindow* lw = frc::LiveWindow::GetInstance();

	shooterEncoder = new frc::AnalogInput (1);

	//ElevatorSwitchTop = new DigitalInput(1);

	//ElevatorCounterTop = new Counter(ElevatorSwitchTop);

	//ElevatorSwitchGarbage = new DigitalInput(2);

	//ElevatorCounterGarbage = new Counter(ElevatorSwitchGarbage);

//	driveTrainFrontLeftDrive = new CANTalon(5);
	
//	driveTrainFrontRightDrive = new CANTalon(1);
	
//	driveTrainRearLeftDrive = new CANTalon(7);
	
//	driveTrainRearRightDrive = new CANTalon(2);
	

    /*driveTrainRearRightPos = new AnalogInput(3);
	lw->AddSensor("DriveTrain", "RearRightPos", driveTrainRearRightPos);
	driveTrainRearRightSteer = new CANTalon(4);
	driveTrainRearRight = new PIDController(0.6, 0.0, 0.0, driveTrainRearRightPos, driveTrainRearRightSteer, 0.02);
	lw->AddActuator("DriveTrain", "RearRight", driveTrainRearRight);
	driveTrainRearRight->SetContinuous(true);
	driveTrainRearRight->SetAbsoluteTolerance(0.1);
    driveTrainRearRight->SetInputRange(0.0, 5.0);
    driveTrainRearRight->SetOutputRange(-0.75, 0.75);

	driveTrainFrontLeftPos = new AnalogInput(2);
	lw->AddSensor("DriveTrain", "FrontLeftPos", driveTrainFrontLeftPos);
	driveTrainFrontLeftSteer = new CANTalon(6);
	driveTrainFrontLeft = new PIDController(0.6, 0.0, 0.0, driveTrainFrontLeftPos, driveTrainFrontLeftSteer, 0.02);
	lw->AddActuator("DriveTrain", "FrontLeft", driveTrainFrontLeft);
	driveTrainFrontLeft->SetContinuous(true);
	driveTrainFrontLeft->SetAbsoluteTolerance(0.1);
    driveTrainFrontLeft->SetInputRange(0.0, 5.0);
    driveTrainFrontLeft->SetOutputRange(-0.75, 0.75);
	
    driveTrainFrontRightPos = new AnalogInput(1);
	lw->AddSensor("DriveTrain", "FrontRightPos", driveTrainFrontRightPos);
	driveTrainFrontRightSteer = new CANTalon(3);
	driveTrainFrontRight = new PIDController(0.6, 0.0, 0.0, driveTrainFrontRightPos, driveTrainFrontRightSteer, 0.02);
	lw->AddActuator("DriveTrain", "FrontRight", driveTrainFrontRight);
	driveTrainFrontRight->SetContinuous(true);
	driveTrainFrontRight->SetAbsoluteTolerance(0.1);
    driveTrainFrontRight->SetInputRange(0.0, 5.0);
    driveTrainFrontRight->SetOutputRange(-0.75, 0.75);
	
    driveTrainRearLeftPos = new AnalogInput(0);
	lw->AddSensor("DriveTrain", "RearLeftPos", driveTrainRearLeftPos);
	driveTrainRearLeftSteer = new CANTalon(8);
	driveTrainRearLeft = new PIDController(0.6, 0.0, 0.0, driveTrainRearLeftPos, driveTrainRearLeftSteer, 0.02);
	lw->AddActuator("DriveTrain", "RearLeft", driveTrainRearLeft);
	driveTrainRearLeft->SetContinuous(true);
	driveTrainRearLeft->SetAbsoluteTolerance(0.1);
    driveTrainRearLeft->SetInputRange(0.0, 5.0);
    driveTrainRearLeft->SetOutputRange(-0.75, 0.75);
	

//	driveTrainFrontLeftSteer->DisableSoftPositionLimits();
//	driveTrainFrontRightSteer->DisableSoftPositionLimits();
//	driveTrainRearLeftSteer->DisableSoftPositionLimits();
//	driveTrainRearRightSteer->DisableSoftPositionLimits();
	
	
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
	//driveTrainFrontLeftPos->SetAverageBits(256);
	//driveTrainFrontRightPos->SetAverageBits(256);
	//driveTrainRearLeftPos->SetAverageBits(256);
	//driveTrainRearRightPos->SetAverageBits(256);

*/

	//cout << "RobotMap Init Complete" << endl;
}
